syntax = "proto3";

package auth;

option go_package = "/auth";

// 错误码枚举
enum ErrorCode {
    Success = 0;
    GenerateTokenError = 1;
    TokenExpired = 2;
    TokenInvalid = 3;
    PermissionDenied = 4;
}

service AuthService {
    // 令牌相关
    rpc DeliverTokenByRPC(DeliverTokenReq) returns (DeliveryResp) {}
    rpc VerifyTokenByRPC(VerifyTokenReq) returns (VerifyResp) {}
    
    // 权限相关
    rpc AddPolicy(PolicyReq) returns (PolicyResp) {}
    rpc RemovePolicy(PolicyReq) returns (PolicyResp) {}
    rpc AddRoleForUser(RoleBindingReq) returns (PolicyResp) {}
    rpc RemoveRoleForUser(RoleBindingReq) returns (PolicyResp) {}
    rpc GetRolesForUser(RoleQueryReq) returns (RoleQueryResp) {}
}

// 令牌相关消息
message DeliverTokenReq {
    int64 user_id = 1;  // 只需要用户ID，角色信息从认证中心获取
}

message VerifyTokenReq {
    string token = 1;
}

message DeliveryResp {
    ErrorCode code = 1;
    string message = 2;
    string token = 3;
    string role = 4;    // 返回用户角色信息
}

message VerifyResp {
    ErrorCode code = 1;
    string message = 2;
    bool is_valid = 3;
    int64 user_id = 4;
    string role = 5;
}

// 权限相关消息
message PolicyReq {
    string role = 1;      // 角色
    string resource = 2;  // 资源
    string action = 3;    // 操作
}

message PolicyResp {
    ErrorCode code = 1;
    string message = 2;
    bool success = 3;
}

message RoleBindingReq {
    int64 user_id = 1;
    string role = 2;
}

message RoleQueryReq {
    int64 user_id = 1;
}

message RoleQueryResp {
    ErrorCode code = 1;
    string message = 2;
    repeated string roles = 3;
}